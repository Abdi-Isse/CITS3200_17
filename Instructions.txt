Client Instructions

Changing the username and password:
	Change the username from admin to whatever you'd like on line 7 of Model.py
	Change the password from password to whatever you'd like on line 8 of Model.py
	
	After making these changes, make sure that you commit it to the GitHub so that heroku can re-build with the new credentials.

	
Changing the contact details:
	If you don't want your email address on the webpage, please just remove the entire <a> ... </a> on line 55 of log.html, and just replace it with Kenji.
	After making these changes, make sure that you commit it to the GitHub so that heroku can re-build with the new HTML.
		

What the client needs to change to add other functionality:
	
	normalise_images(files, target)
		This function takes in an array of files and the base file path, server\uploads\TOKEN\
		It processes each file. If it's an image, it normalises the image such that the image is in black and white and the pixel values are between 0 and 1.
		It returns an array of tuples, where the first element is the array of normalised pixel values, and the second element is the name of the file.
		IF the file can't be processed as an image, either because its an unsupported image or not an image at all, the first element of the tuple an error message, and the second element is left as an empty string.
		Regardless, it updates the progress dictionary.


	bulk_classify(files, loaded_model, token)
		This function takes in the output of normalise_images, and the model that has been loaded from file for the neural network.
			ie, you could call bulk_classify(normalise_images(files, target), loaded_model)
		It changes the array of tuples that was output from normalise_images. 
			For each tuple in that array, if the first element is pixel values, it classifies them and changes the first element of the tuple to that classification
			If the first element is just the error message, then nothing changes.
			Regardless, it updates the progress dictionary.
		

	format_results(token, results)
		This function takes in the output of bulk_classify, and the identifier TOKEN.
		It generates a string of HTML that can be output on the webpage.
		It also creates files that can be downloaded by the user, one file for images that were uploaded, and then a different file for each compressed folder that was uploaded
			The neural network returns a string that contains 3 comma separated values ("classification, percentage, filename")
			If a different neural network returns a string in a different format, specifically with the filename in a different position, this function will have to be changed.
			

Additional Functionality

	Steps required to add another neural network:
		Edit main.html and add an option to the "task" form-group (see example on line 40)
		Edit app.py in the following ways:
			Add your neural network as a function
			
			Change the first else statement in process_images (at around line 362) to ```elif neural_network in [{}]: ``` where {} is the set of options in the task group that this applies to
			Take out the part where you load the model from a file, and paste it into the elif
			
			For each if statement, you need to assess:
				Are the functions that already exist adequate for this new function?
				If yes:
					Add the option from the task group into the array in the if statement, eg ```if neural_network in ["shape", "test"]:```
				Otherwise:
					Change the else to an elif of a similar structure to the if statement
					Define a new function that does the same thing as the existing functions, but slightly modified for the new network
					It is CRITICAL that the return values be in the same format as the existing functions.
						If the return values cannot be in the same format, you will have to write functions for all subsequent if blocks.
					
			
			If a significant number of neural networks are added (probably more than 3 in total), then it's suggested that you refactor process_images into multiple functions
				One function that is suitable for each neural network.
			
			In addition, the following will need to be kept in mind:
				to_send is a HTML string that will be returned to the webpage.
				All zip files are created in memory. This may cause issues with large amounts of images.
				The maximum file size is 10MB. If this is insufficient, it can be changed on line 59 of script.js
				

How data flows through the program:
	This section is more to help with your general understanding of how the main body of code works.
	
	<NOTE: I'm going to complete this tomorrow after work. If somebody else would like to complete it, then please do. >